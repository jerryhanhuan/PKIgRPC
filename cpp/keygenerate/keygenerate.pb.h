// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: keygenerate.proto

#ifndef PROTOBUF_INCLUDED_keygenerate_2eproto
#define PROTOBUF_INCLUDED_keygenerate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_keygenerate_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_keygenerate_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_keygenerate_2eproto();
class KeyGenerateRequest;
class KeyGenerateRequestDefaultTypeInternal;
extern KeyGenerateRequestDefaultTypeInternal _KeyGenerateRequest_default_instance_;
class KeyGenerateResponse;
class KeyGenerateResponseDefaultTypeInternal;
extern KeyGenerateResponseDefaultTypeInternal _KeyGenerateResponse_default_instance_;
class KeyGenerateResponse_KeyPair;
class KeyGenerateResponse_KeyPairDefaultTypeInternal;
extern KeyGenerateResponse_KeyPairDefaultTypeInternal _KeyGenerateResponse_KeyPair_default_instance_;
namespace google {
namespace protobuf {
template<> ::KeyGenerateRequest* Arena::CreateMaybeMessage<::KeyGenerateRequest>(Arena*);
template<> ::KeyGenerateResponse* Arena::CreateMaybeMessage<::KeyGenerateResponse>(Arena*);
template<> ::KeyGenerateResponse_KeyPair* Arena::CreateMaybeMessage<::KeyGenerateResponse_KeyPair>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class KeyGenerateRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KeyGenerateRequest) */ {
 public:
  KeyGenerateRequest();
  virtual ~KeyGenerateRequest();

  KeyGenerateRequest(const KeyGenerateRequest& from);

  inline KeyGenerateRequest& operator=(const KeyGenerateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KeyGenerateRequest(KeyGenerateRequest&& from) noexcept
    : KeyGenerateRequest() {
    *this = ::std::move(from);
  }

  inline KeyGenerateRequest& operator=(KeyGenerateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const KeyGenerateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyGenerateRequest* internal_default_instance() {
    return reinterpret_cast<const KeyGenerateRequest*>(
               &_KeyGenerateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(KeyGenerateRequest* other);
  friend void swap(KeyGenerateRequest& a, KeyGenerateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KeyGenerateRequest* New() const final {
    return CreateMaybeMessage<KeyGenerateRequest>(nullptr);
  }

  KeyGenerateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<KeyGenerateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const KeyGenerateRequest& from);
  void MergeFrom(const KeyGenerateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyGenerateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string transformation = 1;
  void clear_transformation();
  static const int kTransformationFieldNumber = 1;
  const ::std::string& transformation() const;
  void set_transformation(const ::std::string& value);
  #if LANG_CXX11
  void set_transformation(::std::string&& value);
  #endif
  void set_transformation(const char* value);
  void set_transformation(const char* value, size_t size);
  ::std::string* mutable_transformation();
  ::std::string* release_transformation();
  void set_allocated_transformation(::std::string* transformation);

  // string curve = 3;
  void clear_curve();
  static const int kCurveFieldNumber = 3;
  const ::std::string& curve() const;
  void set_curve(const ::std::string& value);
  #if LANG_CXX11
  void set_curve(::std::string&& value);
  #endif
  void set_curve(const char* value);
  void set_curve(const char* value, size_t size);
  ::std::string* mutable_curve();
  ::std::string* release_curve();
  void set_allocated_curve(::std::string* curve);

  // int32 key_size = 2;
  void clear_key_size();
  static const int kKeySizeFieldNumber = 2;
  ::google::protobuf::int32 key_size() const;
  void set_key_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:KeyGenerateRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr transformation_;
  ::google::protobuf::internal::ArenaStringPtr curve_;
  ::google::protobuf::int32 key_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_keygenerate_2eproto;
};
// -------------------------------------------------------------------

class KeyGenerateResponse_KeyPair final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KeyGenerateResponse.KeyPair) */ {
 public:
  KeyGenerateResponse_KeyPair();
  virtual ~KeyGenerateResponse_KeyPair();

  KeyGenerateResponse_KeyPair(const KeyGenerateResponse_KeyPair& from);

  inline KeyGenerateResponse_KeyPair& operator=(const KeyGenerateResponse_KeyPair& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KeyGenerateResponse_KeyPair(KeyGenerateResponse_KeyPair&& from) noexcept
    : KeyGenerateResponse_KeyPair() {
    *this = ::std::move(from);
  }

  inline KeyGenerateResponse_KeyPair& operator=(KeyGenerateResponse_KeyPair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const KeyGenerateResponse_KeyPair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyGenerateResponse_KeyPair* internal_default_instance() {
    return reinterpret_cast<const KeyGenerateResponse_KeyPair*>(
               &_KeyGenerateResponse_KeyPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(KeyGenerateResponse_KeyPair* other);
  friend void swap(KeyGenerateResponse_KeyPair& a, KeyGenerateResponse_KeyPair& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KeyGenerateResponse_KeyPair* New() const final {
    return CreateMaybeMessage<KeyGenerateResponse_KeyPair>(nullptr);
  }

  KeyGenerateResponse_KeyPair* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<KeyGenerateResponse_KeyPair>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const KeyGenerateResponse_KeyPair& from);
  void MergeFrom(const KeyGenerateResponse_KeyPair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyGenerateResponse_KeyPair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes public_key = 1;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 1;
  const ::std::string& public_key() const;
  void set_public_key(const ::std::string& value);
  #if LANG_CXX11
  void set_public_key(::std::string&& value);
  #endif
  void set_public_key(const char* value);
  void set_public_key(const void* value, size_t size);
  ::std::string* mutable_public_key();
  ::std::string* release_public_key();
  void set_allocated_public_key(::std::string* public_key);

  // bytes private_key = 2;
  void clear_private_key();
  static const int kPrivateKeyFieldNumber = 2;
  const ::std::string& private_key() const;
  void set_private_key(const ::std::string& value);
  #if LANG_CXX11
  void set_private_key(::std::string&& value);
  #endif
  void set_private_key(const char* value);
  void set_private_key(const void* value, size_t size);
  ::std::string* mutable_private_key();
  ::std::string* release_private_key();
  void set_allocated_private_key(::std::string* private_key);

  // @@protoc_insertion_point(class_scope:KeyGenerateResponse.KeyPair)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr public_key_;
  ::google::protobuf::internal::ArenaStringPtr private_key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_keygenerate_2eproto;
};
// -------------------------------------------------------------------

class KeyGenerateResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KeyGenerateResponse) */ {
 public:
  KeyGenerateResponse();
  virtual ~KeyGenerateResponse();

  KeyGenerateResponse(const KeyGenerateResponse& from);

  inline KeyGenerateResponse& operator=(const KeyGenerateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KeyGenerateResponse(KeyGenerateResponse&& from) noexcept
    : KeyGenerateResponse() {
    *this = ::std::move(from);
  }

  inline KeyGenerateResponse& operator=(KeyGenerateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const KeyGenerateResponse& default_instance();

  enum KeyCase {
    kSecretKey = 1,
    kKeyPair = 2,
    KEY_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyGenerateResponse* internal_default_instance() {
    return reinterpret_cast<const KeyGenerateResponse*>(
               &_KeyGenerateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(KeyGenerateResponse* other);
  friend void swap(KeyGenerateResponse& a, KeyGenerateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KeyGenerateResponse* New() const final {
    return CreateMaybeMessage<KeyGenerateResponse>(nullptr);
  }

  KeyGenerateResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<KeyGenerateResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const KeyGenerateResponse& from);
  void MergeFrom(const KeyGenerateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyGenerateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef KeyGenerateResponse_KeyPair KeyPair;

  // accessors -------------------------------------------------------

  // bytes secret_key = 1;
  private:
  bool has_secret_key() const;
  public:
  void clear_secret_key();
  static const int kSecretKeyFieldNumber = 1;
  const ::std::string& secret_key() const;
  void set_secret_key(const ::std::string& value);
  #if LANG_CXX11
  void set_secret_key(::std::string&& value);
  #endif
  void set_secret_key(const char* value);
  void set_secret_key(const void* value, size_t size);
  ::std::string* mutable_secret_key();
  ::std::string* release_secret_key();
  void set_allocated_secret_key(::std::string* secret_key);

  // .KeyGenerateResponse.KeyPair key_pair = 2;
  bool has_key_pair() const;
  void clear_key_pair();
  static const int kKeyPairFieldNumber = 2;
  const ::KeyGenerateResponse_KeyPair& key_pair() const;
  ::KeyGenerateResponse_KeyPair* release_key_pair();
  ::KeyGenerateResponse_KeyPair* mutable_key_pair();
  void set_allocated_key_pair(::KeyGenerateResponse_KeyPair* key_pair);

  void clear_key();
  KeyCase key_case() const;
  // @@protoc_insertion_point(class_scope:KeyGenerateResponse)
 private:
  class HasBitSetters;
  void set_has_secret_key();
  void set_has_key_pair();

  inline bool has_key() const;
  inline void clear_has_key();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union KeyUnion {
    KeyUnion() {}
    ::google::protobuf::internal::ArenaStringPtr secret_key_;
    ::KeyGenerateResponse_KeyPair* key_pair_;
  } key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_keygenerate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KeyGenerateRequest

// string transformation = 1;
inline void KeyGenerateRequest::clear_transformation() {
  transformation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeyGenerateRequest::transformation() const {
  // @@protoc_insertion_point(field_get:KeyGenerateRequest.transformation)
  return transformation_.GetNoArena();
}
inline void KeyGenerateRequest::set_transformation(const ::std::string& value) {
  
  transformation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KeyGenerateRequest.transformation)
}
#if LANG_CXX11
inline void KeyGenerateRequest::set_transformation(::std::string&& value) {
  
  transformation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KeyGenerateRequest.transformation)
}
#endif
inline void KeyGenerateRequest::set_transformation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transformation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KeyGenerateRequest.transformation)
}
inline void KeyGenerateRequest::set_transformation(const char* value, size_t size) {
  
  transformation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KeyGenerateRequest.transformation)
}
inline ::std::string* KeyGenerateRequest::mutable_transformation() {
  
  // @@protoc_insertion_point(field_mutable:KeyGenerateRequest.transformation)
  return transformation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyGenerateRequest::release_transformation() {
  // @@protoc_insertion_point(field_release:KeyGenerateRequest.transformation)
  
  return transformation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyGenerateRequest::set_allocated_transformation(::std::string* transformation) {
  if (transformation != nullptr) {
    
  } else {
    
  }
  transformation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transformation);
  // @@protoc_insertion_point(field_set_allocated:KeyGenerateRequest.transformation)
}

// int32 key_size = 2;
inline void KeyGenerateRequest::clear_key_size() {
  key_size_ = 0;
}
inline ::google::protobuf::int32 KeyGenerateRequest::key_size() const {
  // @@protoc_insertion_point(field_get:KeyGenerateRequest.key_size)
  return key_size_;
}
inline void KeyGenerateRequest::set_key_size(::google::protobuf::int32 value) {
  
  key_size_ = value;
  // @@protoc_insertion_point(field_set:KeyGenerateRequest.key_size)
}

// string curve = 3;
inline void KeyGenerateRequest::clear_curve() {
  curve_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeyGenerateRequest::curve() const {
  // @@protoc_insertion_point(field_get:KeyGenerateRequest.curve)
  return curve_.GetNoArena();
}
inline void KeyGenerateRequest::set_curve(const ::std::string& value) {
  
  curve_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KeyGenerateRequest.curve)
}
#if LANG_CXX11
inline void KeyGenerateRequest::set_curve(::std::string&& value) {
  
  curve_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KeyGenerateRequest.curve)
}
#endif
inline void KeyGenerateRequest::set_curve(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  curve_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KeyGenerateRequest.curve)
}
inline void KeyGenerateRequest::set_curve(const char* value, size_t size) {
  
  curve_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KeyGenerateRequest.curve)
}
inline ::std::string* KeyGenerateRequest::mutable_curve() {
  
  // @@protoc_insertion_point(field_mutable:KeyGenerateRequest.curve)
  return curve_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyGenerateRequest::release_curve() {
  // @@protoc_insertion_point(field_release:KeyGenerateRequest.curve)
  
  return curve_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyGenerateRequest::set_allocated_curve(::std::string* curve) {
  if (curve != nullptr) {
    
  } else {
    
  }
  curve_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), curve);
  // @@protoc_insertion_point(field_set_allocated:KeyGenerateRequest.curve)
}

// -------------------------------------------------------------------

// KeyGenerateResponse_KeyPair

// bytes public_key = 1;
inline void KeyGenerateResponse_KeyPair::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeyGenerateResponse_KeyPair::public_key() const {
  // @@protoc_insertion_point(field_get:KeyGenerateResponse.KeyPair.public_key)
  return public_key_.GetNoArena();
}
inline void KeyGenerateResponse_KeyPair::set_public_key(const ::std::string& value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KeyGenerateResponse.KeyPair.public_key)
}
#if LANG_CXX11
inline void KeyGenerateResponse_KeyPair::set_public_key(::std::string&& value) {
  
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KeyGenerateResponse.KeyPair.public_key)
}
#endif
inline void KeyGenerateResponse_KeyPair::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KeyGenerateResponse.KeyPair.public_key)
}
inline void KeyGenerateResponse_KeyPair::set_public_key(const void* value, size_t size) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KeyGenerateResponse.KeyPair.public_key)
}
inline ::std::string* KeyGenerateResponse_KeyPair::mutable_public_key() {
  
  // @@protoc_insertion_point(field_mutable:KeyGenerateResponse.KeyPair.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyGenerateResponse_KeyPair::release_public_key() {
  // @@protoc_insertion_point(field_release:KeyGenerateResponse.KeyPair.public_key)
  
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyGenerateResponse_KeyPair::set_allocated_public_key(::std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:KeyGenerateResponse.KeyPair.public_key)
}

// bytes private_key = 2;
inline void KeyGenerateResponse_KeyPair::clear_private_key() {
  private_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeyGenerateResponse_KeyPair::private_key() const {
  // @@protoc_insertion_point(field_get:KeyGenerateResponse.KeyPair.private_key)
  return private_key_.GetNoArena();
}
inline void KeyGenerateResponse_KeyPair::set_private_key(const ::std::string& value) {
  
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KeyGenerateResponse.KeyPair.private_key)
}
#if LANG_CXX11
inline void KeyGenerateResponse_KeyPair::set_private_key(::std::string&& value) {
  
  private_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KeyGenerateResponse.KeyPair.private_key)
}
#endif
inline void KeyGenerateResponse_KeyPair::set_private_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KeyGenerateResponse.KeyPair.private_key)
}
inline void KeyGenerateResponse_KeyPair::set_private_key(const void* value, size_t size) {
  
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KeyGenerateResponse.KeyPair.private_key)
}
inline ::std::string* KeyGenerateResponse_KeyPair::mutable_private_key() {
  
  // @@protoc_insertion_point(field_mutable:KeyGenerateResponse.KeyPair.private_key)
  return private_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyGenerateResponse_KeyPair::release_private_key() {
  // @@protoc_insertion_point(field_release:KeyGenerateResponse.KeyPair.private_key)
  
  return private_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyGenerateResponse_KeyPair::set_allocated_private_key(::std::string* private_key) {
  if (private_key != nullptr) {
    
  } else {
    
  }
  private_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), private_key);
  // @@protoc_insertion_point(field_set_allocated:KeyGenerateResponse.KeyPair.private_key)
}

// -------------------------------------------------------------------

// KeyGenerateResponse

// bytes secret_key = 1;
inline bool KeyGenerateResponse::has_secret_key() const {
  return key_case() == kSecretKey;
}
inline void KeyGenerateResponse::set_has_secret_key() {
  _oneof_case_[0] = kSecretKey;
}
inline void KeyGenerateResponse::clear_secret_key() {
  if (has_secret_key()) {
    key_.secret_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_key();
  }
}
inline const ::std::string& KeyGenerateResponse::secret_key() const {
  // @@protoc_insertion_point(field_get:KeyGenerateResponse.secret_key)
  if (has_secret_key()) {
    return key_.secret_key_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void KeyGenerateResponse::set_secret_key(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:KeyGenerateResponse.secret_key)
  if (!has_secret_key()) {
    clear_key();
    set_has_secret_key();
    key_.secret_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  key_.secret_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KeyGenerateResponse.secret_key)
}
#if LANG_CXX11
inline void KeyGenerateResponse::set_secret_key(::std::string&& value) {
  // @@protoc_insertion_point(field_set:KeyGenerateResponse.secret_key)
  if (!has_secret_key()) {
    clear_key();
    set_has_secret_key();
    key_.secret_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  key_.secret_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KeyGenerateResponse.secret_key)
}
#endif
inline void KeyGenerateResponse::set_secret_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_secret_key()) {
    clear_key();
    set_has_secret_key();
    key_.secret_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  key_.secret_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KeyGenerateResponse.secret_key)
}
inline void KeyGenerateResponse::set_secret_key(const void* value, size_t size) {
  if (!has_secret_key()) {
    clear_key();
    set_has_secret_key();
    key_.secret_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  key_.secret_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KeyGenerateResponse.secret_key)
}
inline ::std::string* KeyGenerateResponse::mutable_secret_key() {
  if (!has_secret_key()) {
    clear_key();
    set_has_secret_key();
    key_.secret_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:KeyGenerateResponse.secret_key)
  return key_.secret_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyGenerateResponse::release_secret_key() {
  // @@protoc_insertion_point(field_release:KeyGenerateResponse.secret_key)
  if (has_secret_key()) {
    clear_has_key();
    return key_.secret_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void KeyGenerateResponse::set_allocated_secret_key(::std::string* secret_key) {
  if (has_key()) {
    clear_key();
  }
  if (secret_key != nullptr) {
    set_has_secret_key();
    key_.secret_key_.UnsafeSetDefault(secret_key);
  }
  // @@protoc_insertion_point(field_set_allocated:KeyGenerateResponse.secret_key)
}

// .KeyGenerateResponse.KeyPair key_pair = 2;
inline bool KeyGenerateResponse::has_key_pair() const {
  return key_case() == kKeyPair;
}
inline void KeyGenerateResponse::set_has_key_pair() {
  _oneof_case_[0] = kKeyPair;
}
inline void KeyGenerateResponse::clear_key_pair() {
  if (has_key_pair()) {
    delete key_.key_pair_;
    clear_has_key();
  }
}
inline ::KeyGenerateResponse_KeyPair* KeyGenerateResponse::release_key_pair() {
  // @@protoc_insertion_point(field_release:KeyGenerateResponse.key_pair)
  if (has_key_pair()) {
    clear_has_key();
      ::KeyGenerateResponse_KeyPair* temp = key_.key_pair_;
    key_.key_pair_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::KeyGenerateResponse_KeyPair& KeyGenerateResponse::key_pair() const {
  // @@protoc_insertion_point(field_get:KeyGenerateResponse.key_pair)
  return has_key_pair()
      ? *key_.key_pair_
      : *reinterpret_cast< ::KeyGenerateResponse_KeyPair*>(&::_KeyGenerateResponse_KeyPair_default_instance_);
}
inline ::KeyGenerateResponse_KeyPair* KeyGenerateResponse::mutable_key_pair() {
  if (!has_key_pair()) {
    clear_key();
    set_has_key_pair();
    key_.key_pair_ = CreateMaybeMessage< ::KeyGenerateResponse_KeyPair >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:KeyGenerateResponse.key_pair)
  return key_.key_pair_;
}

inline bool KeyGenerateResponse::has_key() const {
  return key_case() != KEY_NOT_SET;
}
inline void KeyGenerateResponse::clear_has_key() {
  _oneof_case_[0] = KEY_NOT_SET;
}
inline KeyGenerateResponse::KeyCase KeyGenerateResponse::key_case() const {
  return KeyGenerateResponse::KeyCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_keygenerate_2eproto
