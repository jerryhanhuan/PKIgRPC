// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: keygenerate.proto

#include "keygenerate.pb.h"
#include "keygenerate.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* KeyGenerateService_method_names[] = {
  "/KeyGenerateService/Generate",
};

std::unique_ptr< KeyGenerateService::Stub> KeyGenerateService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< KeyGenerateService::Stub> stub(new KeyGenerateService::Stub(channel));
  return stub;
}

KeyGenerateService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Generate_(KeyGenerateService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status KeyGenerateService::Stub::Generate(::grpc::ClientContext* context, const ::KeyGenerateRequest& request, ::KeyGenerateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Generate_, context, request, response);
}

void KeyGenerateService::Stub::experimental_async::Generate(::grpc::ClientContext* context, const ::KeyGenerateRequest* request, ::KeyGenerateResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Generate_, context, request, response, std::move(f));
}

void KeyGenerateService::Stub::experimental_async::Generate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::KeyGenerateResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Generate_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::KeyGenerateResponse>* KeyGenerateService::Stub::AsyncGenerateRaw(::grpc::ClientContext* context, const ::KeyGenerateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::KeyGenerateResponse>::Create(channel_.get(), cq, rpcmethod_Generate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::KeyGenerateResponse>* KeyGenerateService::Stub::PrepareAsyncGenerateRaw(::grpc::ClientContext* context, const ::KeyGenerateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::KeyGenerateResponse>::Create(channel_.get(), cq, rpcmethod_Generate_, context, request, false);
}

KeyGenerateService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KeyGenerateService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KeyGenerateService::Service, ::KeyGenerateRequest, ::KeyGenerateResponse>(
          std::mem_fn(&KeyGenerateService::Service::Generate), this)));
}

KeyGenerateService::Service::~Service() {
}

::grpc::Status KeyGenerateService::Service::Generate(::grpc::ServerContext* context, const ::KeyGenerateRequest* request, ::KeyGenerateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


