// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pbkdf.proto

#ifndef PROTOBUF_INCLUDED_pbkdf_2eproto
#define PROTOBUF_INCLUDED_pbkdf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pbkdf_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_pbkdf_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_pbkdf_2eproto();
class PBKDFRequest;
class PBKDFRequestDefaultTypeInternal;
extern PBKDFRequestDefaultTypeInternal _PBKDFRequest_default_instance_;
class PBKDFResponse;
class PBKDFResponseDefaultTypeInternal;
extern PBKDFResponseDefaultTypeInternal _PBKDFResponse_default_instance_;
namespace google {
namespace protobuf {
template<> ::PBKDFRequest* Arena::CreateMaybeMessage<::PBKDFRequest>(Arena*);
template<> ::PBKDFResponse* Arena::CreateMaybeMessage<::PBKDFResponse>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class PBKDFRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PBKDFRequest) */ {
 public:
  PBKDFRequest();
  virtual ~PBKDFRequest();

  PBKDFRequest(const PBKDFRequest& from);

  inline PBKDFRequest& operator=(const PBKDFRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PBKDFRequest(PBKDFRequest&& from) noexcept
    : PBKDFRequest() {
    *this = ::std::move(from);
  }

  inline PBKDFRequest& operator=(PBKDFRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PBKDFRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBKDFRequest* internal_default_instance() {
    return reinterpret_cast<const PBKDFRequest*>(
               &_PBKDFRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PBKDFRequest* other);
  friend void swap(PBKDFRequest& a, PBKDFRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PBKDFRequest* New() const final {
    return CreateMaybeMessage<PBKDFRequest>(nullptr);
  }

  PBKDFRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PBKDFRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PBKDFRequest& from);
  void MergeFrom(const PBKDFRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBKDFRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes salts = 4;
  int salts_size() const;
  void clear_salts();
  static const int kSaltsFieldNumber = 4;
  const ::std::string& salts(int index) const;
  ::std::string* mutable_salts(int index);
  void set_salts(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_salts(int index, ::std::string&& value);
  #endif
  void set_salts(int index, const char* value);
  void set_salts(int index, const void* value, size_t size);
  ::std::string* add_salts();
  void add_salts(const ::std::string& value);
  #if LANG_CXX11
  void add_salts(::std::string&& value);
  #endif
  void add_salts(const char* value);
  void add_salts(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& salts() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_salts();

  // bytes password = 1;
  void clear_password();
  static const int kPasswordFieldNumber = 1;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const void* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // string pseudo_random_function = 3;
  void clear_pseudo_random_function();
  static const int kPseudoRandomFunctionFieldNumber = 3;
  const ::std::string& pseudo_random_function() const;
  void set_pseudo_random_function(const ::std::string& value);
  #if LANG_CXX11
  void set_pseudo_random_function(::std::string&& value);
  #endif
  void set_pseudo_random_function(const char* value);
  void set_pseudo_random_function(const char* value, size_t size);
  ::std::string* mutable_pseudo_random_function();
  ::std::string* release_pseudo_random_function();
  void set_allocated_pseudo_random_function(::std::string* pseudo_random_function);

  // int32 key_size = 2;
  void clear_key_size();
  static const int kKeySizeFieldNumber = 2;
  ::google::protobuf::int32 key_size() const;
  void set_key_size(::google::protobuf::int32 value);

  // int32 iterations = 5;
  void clear_iterations();
  static const int kIterationsFieldNumber = 5;
  ::google::protobuf::int32 iterations() const;
  void set_iterations(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PBKDFRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> salts_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr pseudo_random_function_;
  ::google::protobuf::int32 key_size_;
  ::google::protobuf::int32 iterations_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pbkdf_2eproto;
};
// -------------------------------------------------------------------

class PBKDFResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PBKDFResponse) */ {
 public:
  PBKDFResponse();
  virtual ~PBKDFResponse();

  PBKDFResponse(const PBKDFResponse& from);

  inline PBKDFResponse& operator=(const PBKDFResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PBKDFResponse(PBKDFResponse&& from) noexcept
    : PBKDFResponse() {
    *this = ::std::move(from);
  }

  inline PBKDFResponse& operator=(PBKDFResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PBKDFResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBKDFResponse* internal_default_instance() {
    return reinterpret_cast<const PBKDFResponse*>(
               &_PBKDFResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PBKDFResponse* other);
  friend void swap(PBKDFResponse& a, PBKDFResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PBKDFResponse* New() const final {
    return CreateMaybeMessage<PBKDFResponse>(nullptr);
  }

  PBKDFResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PBKDFResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PBKDFResponse& from);
  void MergeFrom(const PBKDFResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBKDFResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes secret_key = 1;
  void clear_secret_key();
  static const int kSecretKeyFieldNumber = 1;
  const ::std::string& secret_key() const;
  void set_secret_key(const ::std::string& value);
  #if LANG_CXX11
  void set_secret_key(::std::string&& value);
  #endif
  void set_secret_key(const char* value);
  void set_secret_key(const void* value, size_t size);
  ::std::string* mutable_secret_key();
  ::std::string* release_secret_key();
  void set_allocated_secret_key(::std::string* secret_key);

  // @@protoc_insertion_point(class_scope:PBKDFResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr secret_key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pbkdf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PBKDFRequest

// bytes password = 1;
inline void PBKDFRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBKDFRequest::password() const {
  // @@protoc_insertion_point(field_get:PBKDFRequest.password)
  return password_.GetNoArena();
}
inline void PBKDFRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBKDFRequest.password)
}
#if LANG_CXX11
inline void PBKDFRequest::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PBKDFRequest.password)
}
#endif
inline void PBKDFRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBKDFRequest.password)
}
inline void PBKDFRequest::set_password(const void* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBKDFRequest.password)
}
inline ::std::string* PBKDFRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:PBKDFRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBKDFRequest::release_password() {
  // @@protoc_insertion_point(field_release:PBKDFRequest.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBKDFRequest::set_allocated_password(::std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:PBKDFRequest.password)
}

// int32 key_size = 2;
inline void PBKDFRequest::clear_key_size() {
  key_size_ = 0;
}
inline ::google::protobuf::int32 PBKDFRequest::key_size() const {
  // @@protoc_insertion_point(field_get:PBKDFRequest.key_size)
  return key_size_;
}
inline void PBKDFRequest::set_key_size(::google::protobuf::int32 value) {
  
  key_size_ = value;
  // @@protoc_insertion_point(field_set:PBKDFRequest.key_size)
}

// string pseudo_random_function = 3;
inline void PBKDFRequest::clear_pseudo_random_function() {
  pseudo_random_function_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBKDFRequest::pseudo_random_function() const {
  // @@protoc_insertion_point(field_get:PBKDFRequest.pseudo_random_function)
  return pseudo_random_function_.GetNoArena();
}
inline void PBKDFRequest::set_pseudo_random_function(const ::std::string& value) {
  
  pseudo_random_function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBKDFRequest.pseudo_random_function)
}
#if LANG_CXX11
inline void PBKDFRequest::set_pseudo_random_function(::std::string&& value) {
  
  pseudo_random_function_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PBKDFRequest.pseudo_random_function)
}
#endif
inline void PBKDFRequest::set_pseudo_random_function(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pseudo_random_function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBKDFRequest.pseudo_random_function)
}
inline void PBKDFRequest::set_pseudo_random_function(const char* value, size_t size) {
  
  pseudo_random_function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBKDFRequest.pseudo_random_function)
}
inline ::std::string* PBKDFRequest::mutable_pseudo_random_function() {
  
  // @@protoc_insertion_point(field_mutable:PBKDFRequest.pseudo_random_function)
  return pseudo_random_function_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBKDFRequest::release_pseudo_random_function() {
  // @@protoc_insertion_point(field_release:PBKDFRequest.pseudo_random_function)
  
  return pseudo_random_function_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBKDFRequest::set_allocated_pseudo_random_function(::std::string* pseudo_random_function) {
  if (pseudo_random_function != nullptr) {
    
  } else {
    
  }
  pseudo_random_function_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pseudo_random_function);
  // @@protoc_insertion_point(field_set_allocated:PBKDFRequest.pseudo_random_function)
}

// repeated bytes salts = 4;
inline int PBKDFRequest::salts_size() const {
  return salts_.size();
}
inline void PBKDFRequest::clear_salts() {
  salts_.Clear();
}
inline const ::std::string& PBKDFRequest::salts(int index) const {
  // @@protoc_insertion_point(field_get:PBKDFRequest.salts)
  return salts_.Get(index);
}
inline ::std::string* PBKDFRequest::mutable_salts(int index) {
  // @@protoc_insertion_point(field_mutable:PBKDFRequest.salts)
  return salts_.Mutable(index);
}
inline void PBKDFRequest::set_salts(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:PBKDFRequest.salts)
  salts_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PBKDFRequest::set_salts(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:PBKDFRequest.salts)
  salts_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PBKDFRequest::set_salts(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  salts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PBKDFRequest.salts)
}
inline void PBKDFRequest::set_salts(int index, const void* value, size_t size) {
  salts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PBKDFRequest.salts)
}
inline ::std::string* PBKDFRequest::add_salts() {
  // @@protoc_insertion_point(field_add_mutable:PBKDFRequest.salts)
  return salts_.Add();
}
inline void PBKDFRequest::add_salts(const ::std::string& value) {
  salts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PBKDFRequest.salts)
}
#if LANG_CXX11
inline void PBKDFRequest::add_salts(::std::string&& value) {
  salts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:PBKDFRequest.salts)
}
#endif
inline void PBKDFRequest::add_salts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  salts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PBKDFRequest.salts)
}
inline void PBKDFRequest::add_salts(const void* value, size_t size) {
  salts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PBKDFRequest.salts)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
PBKDFRequest::salts() const {
  // @@protoc_insertion_point(field_list:PBKDFRequest.salts)
  return salts_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
PBKDFRequest::mutable_salts() {
  // @@protoc_insertion_point(field_mutable_list:PBKDFRequest.salts)
  return &salts_;
}

// int32 iterations = 5;
inline void PBKDFRequest::clear_iterations() {
  iterations_ = 0;
}
inline ::google::protobuf::int32 PBKDFRequest::iterations() const {
  // @@protoc_insertion_point(field_get:PBKDFRequest.iterations)
  return iterations_;
}
inline void PBKDFRequest::set_iterations(::google::protobuf::int32 value) {
  
  iterations_ = value;
  // @@protoc_insertion_point(field_set:PBKDFRequest.iterations)
}

// -------------------------------------------------------------------

// PBKDFResponse

// bytes secret_key = 1;
inline void PBKDFResponse::clear_secret_key() {
  secret_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBKDFResponse::secret_key() const {
  // @@protoc_insertion_point(field_get:PBKDFResponse.secret_key)
  return secret_key_.GetNoArena();
}
inline void PBKDFResponse::set_secret_key(const ::std::string& value) {
  
  secret_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBKDFResponse.secret_key)
}
#if LANG_CXX11
inline void PBKDFResponse::set_secret_key(::std::string&& value) {
  
  secret_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PBKDFResponse.secret_key)
}
#endif
inline void PBKDFResponse::set_secret_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secret_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBKDFResponse.secret_key)
}
inline void PBKDFResponse::set_secret_key(const void* value, size_t size) {
  
  secret_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBKDFResponse.secret_key)
}
inline ::std::string* PBKDFResponse::mutable_secret_key() {
  
  // @@protoc_insertion_point(field_mutable:PBKDFResponse.secret_key)
  return secret_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBKDFResponse::release_secret_key() {
  // @@protoc_insertion_point(field_release:PBKDFResponse.secret_key)
  
  return secret_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBKDFResponse::set_allocated_secret_key(::std::string* secret_key) {
  if (secret_key != nullptr) {
    
  } else {
    
  }
  secret_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secret_key);
  // @@protoc_insertion_point(field_set_allocated:PBKDFResponse.secret_key)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_pbkdf_2eproto
