// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wrapkeys.proto

#ifndef PROTOBUF_INCLUDED_wrapkeys_2eproto
#define PROTOBUF_INCLUDED_wrapkeys_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_wrapkeys_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_wrapkeys_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_wrapkeys_2eproto();
class Cipher;
class CipherDefaultTypeInternal;
extern CipherDefaultTypeInternal _Cipher_default_instance_;
class Key;
class KeyDefaultTypeInternal;
extern KeyDefaultTypeInternal _Key_default_instance_;
namespace google {
namespace protobuf {
template<> ::Cipher* Arena::CreateMaybeMessage<::Cipher>(Arena*);
template<> ::Key* Arena::CreateMaybeMessage<::Key>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class Cipher final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Cipher) */ {
 public:
  Cipher();
  virtual ~Cipher();

  Cipher(const Cipher& from);

  inline Cipher& operator=(const Cipher& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Cipher(Cipher&& from) noexcept
    : Cipher() {
    *this = ::std::move(from);
  }

  inline Cipher& operator=(Cipher&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Cipher& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cipher* internal_default_instance() {
    return reinterpret_cast<const Cipher*>(
               &_Cipher_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Cipher* other);
  friend void swap(Cipher& a, Cipher& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Cipher* New() const final {
    return CreateMaybeMessage<Cipher>(nullptr);
  }

  Cipher* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Cipher>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Cipher& from);
  void MergeFrom(const Cipher& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cipher* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes messages = 2;
  int messages_size() const;
  void clear_messages();
  static const int kMessagesFieldNumber = 2;
  const ::std::string& messages(int index) const;
  ::std::string* mutable_messages(int index);
  void set_messages(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_messages(int index, ::std::string&& value);
  #endif
  void set_messages(int index, const char* value);
  void set_messages(int index, const void* value, size_t size);
  ::std::string* add_messages();
  void add_messages(const ::std::string& value);
  #if LANG_CXX11
  void add_messages(::std::string&& value);
  #endif
  void add_messages(const char* value);
  void add_messages(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& messages() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_messages();

  // repeated .Key wrappingKeys = 3;
  int wrappingkeys_size() const;
  void clear_wrappingkeys();
  static const int kWrappingKeysFieldNumber = 3;
  ::Key* mutable_wrappingkeys(int index);
  ::google::protobuf::RepeatedPtrField< ::Key >*
      mutable_wrappingkeys();
  const ::Key& wrappingkeys(int index) const;
  ::Key* add_wrappingkeys();
  const ::google::protobuf::RepeatedPtrField< ::Key >&
      wrappingkeys() const;

  // string transformation = 1;
  void clear_transformation();
  static const int kTransformationFieldNumber = 1;
  const ::std::string& transformation() const;
  void set_transformation(const ::std::string& value);
  #if LANG_CXX11
  void set_transformation(::std::string&& value);
  #endif
  void set_transformation(const char* value);
  void set_transformation(const char* value, size_t size);
  ::std::string* mutable_transformation();
  ::std::string* release_transformation();
  void set_allocated_transformation(::std::string* transformation);

  // @@protoc_insertion_point(class_scope:Cipher)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> messages_;
  ::google::protobuf::RepeatedPtrField< ::Key > wrappingkeys_;
  ::google::protobuf::internal::ArenaStringPtr transformation_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wrapkeys_2eproto;
};
// -------------------------------------------------------------------

class Key final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Key) */ {
 public:
  Key();
  virtual ~Key();

  Key(const Key& from);

  inline Key& operator=(const Key& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Key(Key&& from) noexcept
    : Key() {
    *this = ::std::move(from);
  }

  inline Key& operator=(Key&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Key& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Key* internal_default_instance() {
    return reinterpret_cast<const Key*>(
               &_Key_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Key* other);
  friend void swap(Key& a, Key& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Key* New() const final {
    return CreateMaybeMessage<Key>(nullptr);
  }

  Key* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Key>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Key& from);
  void MergeFrom(const Key& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Key* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string transformation = 1;
  void clear_transformation();
  static const int kTransformationFieldNumber = 1;
  const ::std::string& transformation() const;
  void set_transformation(const ::std::string& value);
  #if LANG_CXX11
  void set_transformation(::std::string&& value);
  #endif
  void set_transformation(const char* value);
  void set_transformation(const char* value, size_t size);
  ::std::string* mutable_transformation();
  ::std::string* release_transformation();
  void set_allocated_transformation(::std::string* transformation);

  // bytes secret_key = 4;
  void clear_secret_key();
  static const int kSecretKeyFieldNumber = 4;
  const ::std::string& secret_key() const;
  void set_secret_key(const ::std::string& value);
  #if LANG_CXX11
  void set_secret_key(::std::string&& value);
  #endif
  void set_secret_key(const char* value);
  void set_secret_key(const void* value, size_t size);
  ::std::string* mutable_secret_key();
  ::std::string* release_secret_key();
  void set_allocated_secret_key(::std::string* secret_key);

  // int32 key_size = 2;
  void clear_key_size();
  static const int kKeySizeFieldNumber = 2;
  ::google::protobuf::int32 key_size() const;
  void set_key_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Key)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr transformation_;
  ::google::protobuf::internal::ArenaStringPtr secret_key_;
  ::google::protobuf::int32 key_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wrapkeys_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Cipher

// string transformation = 1;
inline void Cipher::clear_transformation() {
  transformation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cipher::transformation() const {
  // @@protoc_insertion_point(field_get:Cipher.transformation)
  return transformation_.GetNoArena();
}
inline void Cipher::set_transformation(const ::std::string& value) {
  
  transformation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Cipher.transformation)
}
#if LANG_CXX11
inline void Cipher::set_transformation(::std::string&& value) {
  
  transformation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Cipher.transformation)
}
#endif
inline void Cipher::set_transformation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transformation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Cipher.transformation)
}
inline void Cipher::set_transformation(const char* value, size_t size) {
  
  transformation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Cipher.transformation)
}
inline ::std::string* Cipher::mutable_transformation() {
  
  // @@protoc_insertion_point(field_mutable:Cipher.transformation)
  return transformation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cipher::release_transformation() {
  // @@protoc_insertion_point(field_release:Cipher.transformation)
  
  return transformation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cipher::set_allocated_transformation(::std::string* transformation) {
  if (transformation != nullptr) {
    
  } else {
    
  }
  transformation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transformation);
  // @@protoc_insertion_point(field_set_allocated:Cipher.transformation)
}

// repeated bytes messages = 2;
inline int Cipher::messages_size() const {
  return messages_.size();
}
inline void Cipher::clear_messages() {
  messages_.Clear();
}
inline const ::std::string& Cipher::messages(int index) const {
  // @@protoc_insertion_point(field_get:Cipher.messages)
  return messages_.Get(index);
}
inline ::std::string* Cipher::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:Cipher.messages)
  return messages_.Mutable(index);
}
inline void Cipher::set_messages(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Cipher.messages)
  messages_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Cipher::set_messages(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Cipher.messages)
  messages_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Cipher::set_messages(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  messages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Cipher.messages)
}
inline void Cipher::set_messages(int index, const void* value, size_t size) {
  messages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cipher.messages)
}
inline ::std::string* Cipher::add_messages() {
  // @@protoc_insertion_point(field_add_mutable:Cipher.messages)
  return messages_.Add();
}
inline void Cipher::add_messages(const ::std::string& value) {
  messages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Cipher.messages)
}
#if LANG_CXX11
inline void Cipher::add_messages(::std::string&& value) {
  messages_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Cipher.messages)
}
#endif
inline void Cipher::add_messages(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  messages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Cipher.messages)
}
inline void Cipher::add_messages(const void* value, size_t size) {
  messages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Cipher.messages)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
Cipher::messages() const {
  // @@protoc_insertion_point(field_list:Cipher.messages)
  return messages_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
Cipher::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:Cipher.messages)
  return &messages_;
}

// repeated .Key wrappingKeys = 3;
inline int Cipher::wrappingkeys_size() const {
  return wrappingkeys_.size();
}
inline void Cipher::clear_wrappingkeys() {
  wrappingkeys_.Clear();
}
inline ::Key* Cipher::mutable_wrappingkeys(int index) {
  // @@protoc_insertion_point(field_mutable:Cipher.wrappingKeys)
  return wrappingkeys_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Key >*
Cipher::mutable_wrappingkeys() {
  // @@protoc_insertion_point(field_mutable_list:Cipher.wrappingKeys)
  return &wrappingkeys_;
}
inline const ::Key& Cipher::wrappingkeys(int index) const {
  // @@protoc_insertion_point(field_get:Cipher.wrappingKeys)
  return wrappingkeys_.Get(index);
}
inline ::Key* Cipher::add_wrappingkeys() {
  // @@protoc_insertion_point(field_add:Cipher.wrappingKeys)
  return wrappingkeys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Key >&
Cipher::wrappingkeys() const {
  // @@protoc_insertion_point(field_list:Cipher.wrappingKeys)
  return wrappingkeys_;
}

// -------------------------------------------------------------------

// Key

// string transformation = 1;
inline void Key::clear_transformation() {
  transformation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Key::transformation() const {
  // @@protoc_insertion_point(field_get:Key.transformation)
  return transformation_.GetNoArena();
}
inline void Key::set_transformation(const ::std::string& value) {
  
  transformation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Key.transformation)
}
#if LANG_CXX11
inline void Key::set_transformation(::std::string&& value) {
  
  transformation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Key.transformation)
}
#endif
inline void Key::set_transformation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transformation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Key.transformation)
}
inline void Key::set_transformation(const char* value, size_t size) {
  
  transformation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Key.transformation)
}
inline ::std::string* Key::mutable_transformation() {
  
  // @@protoc_insertion_point(field_mutable:Key.transformation)
  return transformation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Key::release_transformation() {
  // @@protoc_insertion_point(field_release:Key.transformation)
  
  return transformation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Key::set_allocated_transformation(::std::string* transformation) {
  if (transformation != nullptr) {
    
  } else {
    
  }
  transformation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transformation);
  // @@protoc_insertion_point(field_set_allocated:Key.transformation)
}

// int32 key_size = 2;
inline void Key::clear_key_size() {
  key_size_ = 0;
}
inline ::google::protobuf::int32 Key::key_size() const {
  // @@protoc_insertion_point(field_get:Key.key_size)
  return key_size_;
}
inline void Key::set_key_size(::google::protobuf::int32 value) {
  
  key_size_ = value;
  // @@protoc_insertion_point(field_set:Key.key_size)
}

// bytes secret_key = 4;
inline void Key::clear_secret_key() {
  secret_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Key::secret_key() const {
  // @@protoc_insertion_point(field_get:Key.secret_key)
  return secret_key_.GetNoArena();
}
inline void Key::set_secret_key(const ::std::string& value) {
  
  secret_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Key.secret_key)
}
#if LANG_CXX11
inline void Key::set_secret_key(::std::string&& value) {
  
  secret_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Key.secret_key)
}
#endif
inline void Key::set_secret_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secret_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Key.secret_key)
}
inline void Key::set_secret_key(const void* value, size_t size) {
  
  secret_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Key.secret_key)
}
inline ::std::string* Key::mutable_secret_key() {
  
  // @@protoc_insertion_point(field_mutable:Key.secret_key)
  return secret_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Key::release_secret_key() {
  // @@protoc_insertion_point(field_release:Key.secret_key)
  
  return secret_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Key::set_allocated_secret_key(::std::string* secret_key) {
  if (secret_key != nullptr) {
    
  } else {
    
  }
  secret_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secret_key);
  // @@protoc_insertion_point(field_set_allocated:Key.secret_key)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_wrapkeys_2eproto
