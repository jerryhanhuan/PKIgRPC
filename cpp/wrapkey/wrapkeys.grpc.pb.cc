// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: wrapkeys.proto

#include "wrapkeys.pb.h"
#include "wrapkeys.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* WrapKey_method_names[] = {
  "/WrapKey/Wrap",
};

std::unique_ptr< WrapKey::Stub> WrapKey::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< WrapKey::Stub> stub(new WrapKey::Stub(channel));
  return stub;
}

WrapKey::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Wrap_(WrapKey_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status WrapKey::Stub::Wrap(::grpc::ClientContext* context, const ::Cipher& request, ::Cipher* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Wrap_, context, request, response);
}

void WrapKey::Stub::experimental_async::Wrap(::grpc::ClientContext* context, const ::Cipher* request, ::Cipher* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Wrap_, context, request, response, std::move(f));
}

void WrapKey::Stub::experimental_async::Wrap(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Cipher* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Wrap_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Cipher>* WrapKey::Stub::AsyncWrapRaw(::grpc::ClientContext* context, const ::Cipher& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Cipher>::Create(channel_.get(), cq, rpcmethod_Wrap_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Cipher>* WrapKey::Stub::PrepareAsyncWrapRaw(::grpc::ClientContext* context, const ::Cipher& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Cipher>::Create(channel_.get(), cq, rpcmethod_Wrap_, context, request, false);
}

WrapKey::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WrapKey_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WrapKey::Service, ::Cipher, ::Cipher>(
          std::mem_fn(&WrapKey::Service::Wrap), this)));
}

WrapKey::Service::~Service() {
}

::grpc::Status WrapKey::Service::Wrap(::grpc::ServerContext* context, const ::Cipher* request, ::Cipher* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


