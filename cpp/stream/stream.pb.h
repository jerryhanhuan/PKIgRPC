// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stream.proto

#ifndef PROTOBUF_INCLUDED_stream_2eproto
#define PROTOBUF_INCLUDED_stream_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_stream_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_stream_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_stream_2eproto();
class StreamReqData;
class StreamReqDataDefaultTypeInternal;
extern StreamReqDataDefaultTypeInternal _StreamReqData_default_instance_;
class StreamResData;
class StreamResDataDefaultTypeInternal;
extern StreamResDataDefaultTypeInternal _StreamResData_default_instance_;
namespace google {
namespace protobuf {
template<> ::StreamReqData* Arena::CreateMaybeMessage<::StreamReqData>(Arena*);
template<> ::StreamResData* Arena::CreateMaybeMessage<::StreamResData>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class StreamReqData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StreamReqData) */ {
 public:
  StreamReqData();
  virtual ~StreamReqData();

  StreamReqData(const StreamReqData& from);

  inline StreamReqData& operator=(const StreamReqData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StreamReqData(StreamReqData&& from) noexcept
    : StreamReqData() {
    *this = ::std::move(from);
  }

  inline StreamReqData& operator=(StreamReqData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StreamReqData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamReqData* internal_default_instance() {
    return reinterpret_cast<const StreamReqData*>(
               &_StreamReqData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(StreamReqData* other);
  friend void swap(StreamReqData& a, StreamReqData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StreamReqData* New() const final {
    return CreateMaybeMessage<StreamReqData>(nullptr);
  }

  StreamReqData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StreamReqData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StreamReqData& from);
  void MergeFrom(const StreamReqData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamReqData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string req_data = 1;
  void clear_req_data();
  static const int kReqDataFieldNumber = 1;
  const ::std::string& req_data() const;
  void set_req_data(const ::std::string& value);
  #if LANG_CXX11
  void set_req_data(::std::string&& value);
  #endif
  void set_req_data(const char* value);
  void set_req_data(const char* value, size_t size);
  ::std::string* mutable_req_data();
  ::std::string* release_req_data();
  void set_allocated_req_data(::std::string* req_data);

  // @@protoc_insertion_point(class_scope:StreamReqData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr req_data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stream_2eproto;
};
// -------------------------------------------------------------------

class StreamResData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StreamResData) */ {
 public:
  StreamResData();
  virtual ~StreamResData();

  StreamResData(const StreamResData& from);

  inline StreamResData& operator=(const StreamResData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StreamResData(StreamResData&& from) noexcept
    : StreamResData() {
    *this = ::std::move(from);
  }

  inline StreamResData& operator=(StreamResData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StreamResData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamResData* internal_default_instance() {
    return reinterpret_cast<const StreamResData*>(
               &_StreamResData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(StreamResData* other);
  friend void swap(StreamResData& a, StreamResData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StreamResData* New() const final {
    return CreateMaybeMessage<StreamResData>(nullptr);
  }

  StreamResData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StreamResData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StreamResData& from);
  void MergeFrom(const StreamResData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamResData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string res_data = 1;
  void clear_res_data();
  static const int kResDataFieldNumber = 1;
  const ::std::string& res_data() const;
  void set_res_data(const ::std::string& value);
  #if LANG_CXX11
  void set_res_data(::std::string&& value);
  #endif
  void set_res_data(const char* value);
  void set_res_data(const char* value, size_t size);
  ::std::string* mutable_res_data();
  ::std::string* release_res_data();
  void set_allocated_res_data(::std::string* res_data);

  // @@protoc_insertion_point(class_scope:StreamResData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr res_data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stream_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StreamReqData

// string req_data = 1;
inline void StreamReqData::clear_req_data() {
  req_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StreamReqData::req_data() const {
  // @@protoc_insertion_point(field_get:StreamReqData.req_data)
  return req_data_.GetNoArena();
}
inline void StreamReqData::set_req_data(const ::std::string& value) {
  
  req_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StreamReqData.req_data)
}
#if LANG_CXX11
inline void StreamReqData::set_req_data(::std::string&& value) {
  
  req_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StreamReqData.req_data)
}
#endif
inline void StreamReqData::set_req_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  req_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StreamReqData.req_data)
}
inline void StreamReqData::set_req_data(const char* value, size_t size) {
  
  req_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StreamReqData.req_data)
}
inline ::std::string* StreamReqData::mutable_req_data() {
  
  // @@protoc_insertion_point(field_mutable:StreamReqData.req_data)
  return req_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StreamReqData::release_req_data() {
  // @@protoc_insertion_point(field_release:StreamReqData.req_data)
  
  return req_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StreamReqData::set_allocated_req_data(::std::string* req_data) {
  if (req_data != nullptr) {
    
  } else {
    
  }
  req_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), req_data);
  // @@protoc_insertion_point(field_set_allocated:StreamReqData.req_data)
}

// -------------------------------------------------------------------

// StreamResData

// string res_data = 1;
inline void StreamResData::clear_res_data() {
  res_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StreamResData::res_data() const {
  // @@protoc_insertion_point(field_get:StreamResData.res_data)
  return res_data_.GetNoArena();
}
inline void StreamResData::set_res_data(const ::std::string& value) {
  
  res_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StreamResData.res_data)
}
#if LANG_CXX11
inline void StreamResData::set_res_data(::std::string&& value) {
  
  res_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StreamResData.res_data)
}
#endif
inline void StreamResData::set_res_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  res_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StreamResData.res_data)
}
inline void StreamResData::set_res_data(const char* value, size_t size) {
  
  res_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StreamResData.res_data)
}
inline ::std::string* StreamResData::mutable_res_data() {
  
  // @@protoc_insertion_point(field_mutable:StreamResData.res_data)
  return res_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StreamResData::release_res_data() {
  // @@protoc_insertion_point(field_release:StreamResData.res_data)
  
  return res_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StreamResData::set_allocated_res_data(::std::string* res_data) {
  if (res_data != nullptr) {
    
  } else {
    
  }
  res_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), res_data);
  // @@protoc_insertion_point(field_set_allocated:StreamResData.res_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_stream_2eproto
