// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: transferfile.proto

#include "transferfile.pb.h"
#include "transferfile.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* TransferFile_method_names[] = {
  "/TransferFile/Upload",
};

std::unique_ptr< TransferFile::Stub> TransferFile::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TransferFile::Stub> stub(new TransferFile::Stub(channel));
  return stub;
}

TransferFile::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Upload_(TransferFile_method_names[0], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  {}

::grpc::ClientWriter< ::Chunk>* TransferFile::Stub::UploadRaw(::grpc::ClientContext* context, ::Reply* response) {
  return ::grpc::internal::ClientWriterFactory< ::Chunk>::Create(channel_.get(), rpcmethod_Upload_, context, response);
}

void TransferFile::Stub::experimental_async::Upload(::grpc::ClientContext* context, ::Reply* response, ::grpc::experimental::ClientWriteReactor< ::Chunk>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::Chunk>::Create(stub_->channel_.get(), stub_->rpcmethod_Upload_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::Chunk>* TransferFile::Stub::AsyncUploadRaw(::grpc::ClientContext* context, ::Reply* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::Chunk>::Create(channel_.get(), cq, rpcmethod_Upload_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::Chunk>* TransferFile::Stub::PrepareAsyncUploadRaw(::grpc::ClientContext* context, ::Reply* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::Chunk>::Create(channel_.get(), cq, rpcmethod_Upload_, context, response, false, nullptr);
}

TransferFile::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TransferFile_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< TransferFile::Service, ::Chunk, ::Reply>(
          std::mem_fn(&TransferFile::Service::Upload), this)));
}

TransferFile::Service::~Service() {
}

::grpc::Status TransferFile::Service::Upload(::grpc::ServerContext* context, ::grpc::ServerReader< ::Chunk>* reader, ::Reply* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


